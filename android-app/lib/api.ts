// lib/api.ts

const API_BASE = "https://buymeshop.shop"

export async function loginUser(username: string, password: string) {
    const res = await fetch(`${API_BASE}/api/login`, {  // s·ª≠a endpoint
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ username, password }),
    });

    if (!res.ok) {
        const error = await res.json();
        throw new Error(error.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i");
    }

    return res.json();
}

export async function getProducts() {
    const res = await fetch(`${API_BASE}/api/products`);  // s·ª≠a endpoint

    if (!res.ok) {
        throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m");
    }

    return res.json();
}

export async function getProductById(id: string) {
    const res = await fetch(`${API_BASE}/api/product/${id}`); 
    if (!res.ok) {
        throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m");
    }

    const data = await res.json();
    return data;
}

export async function seachProducts(query: string) {
    const products: Product[] = await (await getProducts()).products;
    const products_found: Product[] = products.filter(p => p.name === query);
    return products_found
}


const MAP_URL = "https://vapi.vnappmob.com/api/v2"
import {Province, District, Ward} from "@/schemas/map"
import { Product } from "@/schemas/product";

export async function fetchProvinces() {
    try {
        const response = await fetch(`${MAP_URL}/province/`);
        const data: { results:Province[]}= await response.json();
        return data.results || [];
    } catch (error) {
        console.error("Error fetching provinces:", error);
        return [];
    }
}


export async function fetchDistricts(provinceId: string): Promise<District[]> {
    try {
        const response = await fetch(
            `${MAP_URL}/province/district/${provinceId}`
        );
        const data: { results: District[] } = await response.json();
        return data.results || [];
    } catch (error) {
        console.error("Error fetching districts:", error);
        return [];
    }
}



export async function fetchWards(districtId: string): Promise<Ward[]> {
    try {
        const response = await fetch(
            `${MAP_URL}/province/ward/${districtId}`
        );
        const data: { results: Ward[] } = await response.json();
        return data.results || [];
    } catch (error) {
        console.error("Error fetching wards:", error);
        return [];
    }
}
import { UserRegister } from "@/schemas/user"
export async function registerUser(params: UserRegister) {
    return params
}


// lib/api.ts

export interface ChatMessage {
    role: "user" | "AI" | string;
    message: string;
}

export interface ChatRequest {
    use_retrieve: boolean;
    messages: ChatMessage[];
    model_name: string;
    temperature: number;
    instruction: string;
}

/**
 * G·ª≠i y√™u c·∫ßu chat t·ªõi API
 * @param userMessage - Tin nh·∫Øn nh·∫≠p t·ª´ ph√≠a ng∆∞·ªùi d√πng
 * @returns Promise v·ªõi k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API
 */
export async function sendChatRequest(messages: ChatMessage[]): Promise<ChatMessage> {
    const payload: ChatRequest = {
        use_retrieve: true,
        messages: messages,
        model_name: "meta-llama/llama-4-scout-17b-16e-instruct",
        temperature: 0.5,
        instruction: `B·∫°n l√† L‚Äôs Peter ‚Äì m·ªôt tr·ª£ l√Ω th√¢n thi·ªán, h·ªØu √≠ch c·ªßa BuyMe Shop.

C√¥ng vi·ªác c·ªßa b·∫°n l√† gi√∫p kh√°ch h√†ng duy·ªát, l·ª±a ch·ªçn v√† mua s·∫£n ph·∫©m t·ª´ c·ª≠a h√†ng. ƒê·∫∑t c√¢u h·ªèi ƒë·ªÉ hi·ªÉu nhu c·∫ßu c·ªßa h·ªç, g·ª£i √Ω c√°c m·∫∑t h√†ng ph√π h·ª£p v√† cung c·∫•p th√¥ng tin chi ti·∫øt (gi√° c·∫£, t√≠nh nƒÉng, k√≠ch th∆∞·ªõc, v.v.).

Ngo√†i ra, h√£y h·ªó tr·ª£ c√°c c√¢u h·ªèi v·ªÅ v·∫≠n chuy·ªÉn, thanh to√°n, tr·∫£ h√†ng v√† theo d√µi ƒë∆°n h√†ng.

N√≥i r√µ r√†ng v√† l·ªãch s·ª±. Nhi·ªát t√¨nh v√† chuy√™n nghi·ªáp. Kh√¥ng ƒë∆∞a ra l·ªùi khuy√™n kh√¥ng li√™n quan ƒë·∫øn c·ª≠a h√†ng.

V√≠ d·ª•:
"Xin ch√†o! T√¥i l√† L‚Äôs Peter t·ª´ BuyMe Shop üòä T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"`
    };

    try {
        const response = await fetch("https://chatbotonline.site/api/chat_with_instruction", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(payload),
        });

        if (!response.ok) {
            throw new Error(`Request failed with status ${response.status}`);
        }
        const res_json = await response.json()
        const chat_msg : ChatMessage = {"role": "AI","message":res_json.answer}
        return chat_msg;
    } catch (error) {
        console.error("Error while sending chat request:", error);
        throw error;
    } finally {
        const last_msg = messages[messages.length - 1];
        console.log("Last msg: ", last_msg);
        
        const behavior = await analyzeBehavior(last_msg.message);
        console.log("behavior: ", behavior);
    }
}

export interface Behavior{
    behavior: string;
    params: string;
}
export async function analyzeBehavior(message: string): Promise<Behavior> {
    const _msg: ChatMessage[] = [{ role: "user", message: message.trim() }]
    const payload: ChatRequest = {
        use_retrieve: false,
        messages: _msg,
        model_name: "meta-llama/llama-4-scout-17b-16e-instruct",
        temperature: 0.5,
        instruction: `You are an expert in analyzing customer intent for an online clothing store. Your task is to determine what the customer wants to do based on their message.

Possible behaviors:
- search: searching for a product (params: product name)
- new_product: browsing new arrivals
- trending: viewing trending products
- price: checking the price of a product (params: product name)

Return the result in the following format:
{{"behavior":behavior_name_if_any, "params":parameter_value_if_any}}

Example:
User: "I want to see new arrivals"
Return: {{"behavior":"new_product", "params":null}}

If customer dont intent do anything, reutrn {{"behavior":null, "params":null}}
Do not provide any explanation. Only return the result exactly in the specified format.`
    };

    try {
        const response = await fetch("https://chatbotonline.site/api/chat_with_instruction", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(payload),
        });

        if (!response.ok) {
            throw new Error(`Request failed with status ${response.status}`);
        }
        const behavior = await response.json();
        let behavior_json = null;

        if (typeof behavior.answer === 'string') {
            try {
                behavior_json = JSON.parse(behavior.answer);

            } catch (error) {
                console.error("Invalid JSON format in behavior.answer:", error);
            }
        } else {
            behavior_json = behavior.answer;
            console.warn("behavior.answer is not a string:", behavior.answer);
        }
        return await behavior_json;
    } catch (error) {
        console.error("Error while sending chat request:", error);
        throw error;
    }
}

export async function randomMessage(): Promise < string > {
    const _msg: ChatMessage[] = [{ role: "user", message: "" }]
    const payload: ChatRequest = {
        use_retrieve: false,
        messages: _msg,
        model_name: "meta-llama/llama-4-scout-17b-16e-instruct",
        temperature: 1,
        instruction: `B·∫°n l√† tr·ª£ l√Ω c·ªßa m·ªôt shop b√°n qu·∫ßn √°o online, nhi·ªám v·ª• c·ªßa b·∫°n l√† m·ªùi ch√†o kh√°ch v√† tr√≤ chuy·ªán, h√£y ƒë∆∞a ra c√¢u m·ªùi ch√†o th√∫ v·ªã.
        
        Y√™u c·∫ßu: si√™u vui t√≠nh, ph√π h·ª£p v·ªõi gi·ªõi tr·∫ª. Ch√∫ √Ω ng·∫Øn g·ªçn th√¥i, d∆∞·ªõi 10 ch·ªØ. V√≠ d·ª•: Anh ch·ªã n√≥i chuy·ªán v·ªõi em ƒëi..., ƒÇn c∆°m ch∆∞a b√© ∆°i??`
    };

    try {
        const response = await fetch("https://chatbotonline.site/api/chat_with_instruction", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(payload),
        });

        if (!response.ok) {
            throw new Error(`Request failed with status ${response.status}`);
        }
        const res_json = await response.json()
        return res_json.answer
    } catch (error) {
        console.error("Error while sending chat request:", error);
        throw error;
    }
}